app-init

    mixin credits
        a(href="https://github.com/donpark/html2jade")
            |  html2jade by donpark
        br
        a(href="http://jade-lang.com/")
            |  Jade The Template Language
        br
        a(href="https://ace.c9.io/")
            |  Ace Editor By Cloud9
        br
        a(href="http://semantic-ui.com/")
            |  Semantic UI
        br
        a(href="https://getmdl.io/")
            |  Material Design Lite
        br
        a(href="http://riotjs.com/")
            |  RiotJS by Muut
        br
        #author(style="position:absolute; bottom: 0;")
            | Made by
            a(href="https://github.com/cia48621793") cia48621793
    mixin global_options
        label.mdl-switch.mdl-js-switch.mdl-js-ripple-effect(for='option_ignore_error_messages')
            input#option_ignore_error_messages.mdl-switch__input(type='checkbox', onclick='{fn.refreshEditors}')
            span.mdl-switch__label Ignore Error Messages?

    mixin html_options
        label.mdl-switch.mdl-js-switch.mdl-js-ripple-effect(for='option_encode_entities')
            input#option_encode_entities.mdl-switch__input(type='checkbox', onclick='{fn.refreshEditors}', checked)
            span.mdl-switch__label Encode HTML Entities?

        label.mdl-switch.mdl-js-switch.mdl-js-ripple-effect(for='option_empty_pipe')
            input#option_empty_pipe.mdl-switch__input(type='checkbox', onclick='{fn.refreshEditors}', checked)
            span.mdl-switch__label No Empty Pipes?

        label.mdl-switch.mdl-js-switch.mdl-js-ripple-effect(for='option_body_less')
            input#option_body_less.mdl-switch__input(type='checkbox', onclick='{fn.refreshEditors}', checked)
            span.mdl-switch__label No Standard Html Tags?

    mixin jade_options
        label.mdl-switch.mdl-js-switch.mdl-js-ripple-effect(for='option_pretty_html')
            input#option_pretty_html.mdl-switch__input(type='checkbox', onclick='{fn.refreshEditors}', checked)
            span.mdl-switch__label Beautify HTML?

    .mdl-layout.mdl-js-layout.mdl-layout--fixed-header
        header.mdl-layout__header
            .mdl-layout__header-row
                span.mdl-layout-title HTML vs Jade
                button.mdl-button.mdl-js-button.mdl-button--raised(onclick="{fn.onSaveState}", style="margin-left: 32px")
                    | Save State
        .mdl-layout__drawer
            span.mdl-layout-title#options Options
            nav.mdl-navigation
                .ui.horizontal.divider Global Options
                +global_options
                .ui.horizontal.divider HTML to Jade
                +html_options
                .ui.horizontal.divider Jade to HTML
                +jade_options
                .ui.horizontal.divider Credits
                #credits: +credits


        main.mdl-layout__content
            i#selected Currently Selected: {obj.selected_tab}
            .mdl-grid
                .mdl-cell.mdl-cell--6-col
                    #editor_html
                .mdl-cell.mdl-cell--6-col
                    #editor_jade

    style(scoped).
        #options {
            margin-left: 36px;
        }

        #credits {
            margin-left: 10px;
        }

        #selected {
            position: absolute;
            top: 0;
        }

        #editor_html {
            position: absolute;
            top: 20px;
            bottom: 0;
            left: 0;
            width: 50%;
        }
        #editor_jade {
            position: absolute;
            top: 20px;
            bottom: 0;
            right: 0;
            width: 50%;
        }


    script(type='text/javascript').
        var self = this;
        self.obj = {
            selected_tab: "html",
            selected_value: "",
        }

        riot.route('/', function() {
            self.ace_editor_html.setValue(
                    "<h1>Hellooooooooo!</h1>\n" +
                    "<h2>This is an automatically inserted example.</h2>\n" +
                    "<h3>You should be able to see this example be compiled to Jade on the right panel(or decompiled to the left).</h3>\n" +
                    "<h4>This single-page-app will compile HTML to Jade (and vice versa) on-the-fly.</h4>\n" +
                    "<h5>This is just an alpha prototype version, so I hope in the future we will have more features.</h5>\n" +
                    "<h6>Finally, enjoy your time hacking this out! Thank you for using this app.</h6>\n" +
                    "\n" +
                    "<div>\n\t<div>\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t" +
                    "<p>Nesting Example</p>\n" +
                    "\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n" +
                    '<table style="width:100%">\n' +
                    '    <tr>\n' +
                    '        <th>Name</th>\n' +
                    '        <th>Age</th>\n' +
                    '    </tr>\n\n' +
                    '    <tr>\n' +
                    '        <td>Alice</td>\n' +
                    '        <td>18 Years Old</td>\n' +
                    '    </tr>\n' +
                    '    <tr>\n' +
                    '        <td>Bob</td>\n' +
                    '        <td>10 Years Old</td>\n' +
                    '    </tr>\n' +
                    '    <tr>\n' +
                    '        <td>Charile</td>\n' +
                    '        <td>30 Years Old</td>\n' +
                    '    </tr>\n' +
                    '    <tr>\n' +
                    '        <td>Dave</td>\n' +
                    '        <td>26 Years Old</td>\n' +
                    '    </tr>\n' +
                    '</table>\n\n' +
                    '<login>\n' +
                    '    <form onsubmit="{ login }">\n' +
                    '        <input name="username" type="text" placeholder="username">\n' +
                    '        <input name="password" type="password" placeholder="password">\n' +
                    '    </form>\n' +
                    '</login>'
            );
            self.update();
        })

        riot.route('/state/*', function (state) {
            self.obj = JSON.parse(atob(state))
            if (self.obj.selected_tab === 'html') {
                self.ace_editor_html.setValue(self.obj.selected_value);
            } else if (self.obj.selected_tab === 'jade') {
                self.ace_editor_jade.setValue(self.obj.selected_value);
            }

            self.fn.refreshEditors();
            self.update();
        })

        self.on("mount", function() {

            toastr.options = {
                "closeButton": true,
                "debug": false,
                "newestOnTop": true,
                "progressBar": false,
                "positionClass": "toast-top-right",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "3000",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }

            $(self.editor_html).mouseover(function () {
                try {
                    self.editor_html.focus();
                } catch (ex) {

                }
            })
            $(self.editor_jade).mouseover(function () {
                try {
                    self.editor_jade.focus();
                } catch (ex) {

                }
            })

            self.ace_editor_html = ace.edit("editor_html");
            self.ace_editor_html.$blockScrolling = Infinity;
            self.ace_editor_html.getSession().setMode("ace/mode/html");
            self.ace_editor_html.setTheme("ace/theme/monokai");
            self.ace_editor_html.getSession().setTabSize(2);
            self.ace_editor_html.getSession().setUseWorker(true);
            self.ace_editor_html.getSession().setUseWrapMode(true);

            self.ace_editor_jade = ace.edit("editor_jade");
            self.ace_editor_jade.$blockScrolling = Infinity;
            self.ace_editor_jade.getSession().setMode("ace/mode/jade");
            self.ace_editor_jade.setTheme("ace/theme/monokai");
            self.ace_editor_jade.getSession().setTabSize(2);
            self.ace_editor_jade.getSession().setUseWorker(true);
            self.ace_editor_jade.getSession().setUseWrapMode(true);

            self.ace_editor_html.getSession().on('change', function (e) {
                if (self.obj.selected_tab === 'html') {
                    self.obj.selected_value = self.ace_editor_html.getValue();
                    self.fn.updateHtmlToJade();
                }
            })

            self.ace_editor_html.on('focus', function (e) {
                self.obj.selected_tab = 'html';
                self.obj.selected_value = self.ace_editor_html.getValue();
                self.update();
            })

            self.ace_editor_jade.getSession().on('change', function (e) {
                if (self.obj.selected_tab === 'jade') {
                    self.obj.selected_value = self.ace_editor_jade.getValue();
                    self.fn.updateJadeToHtml();
                    self.update();
                }
            });

            self.ace_editor_jade.on('focus', function (e) {
                self.obj.selected_tab = "jade";
                self.obj.selected_value = self.ace_editor_jade.getValue();
                self.update();
            })
        });

        self.fn = new class {
            updateHtmlToJade() {
                if (self.obj.selected_tab !== "html") {
                    return;
                }

                if (self.obj.selected_value === '') {
                    self.ace_editor_jade.setValue('');
                } else {
                    html2jade.convertHtml(self.obj.selected_value, {
                        noemptypipe: self.option_empty_pipe.checked,
                        donotencode: self.option_encode_entities.checked,
                        bodyless: self.option_body_less.checked,
                    }, function (err, jade) {
                        if (err && !self.option_ignore_error_messages.checked) {
                            toastr.error(err.toString().replace(/\n/g, '<br/>'), "Error from Html2Jade Compiler");
                            return;
                        }
                        self.ace_editor_jade.setValue(jade.trim());
                    });
                }
            }
            updateJadeToHtml() {
                if (self.obj.selected_tab !== "jade") {
                    return;
                }

                try {
                    if (self.obj.selected_value === '') {
                        self.ace_editor_html.setValue('');
                    } else {
                        self.ace_editor_html.setValue(jade.render(self.obj.selected_value, {
                            pretty: self.option_pretty_html.checked,
                        }).trim());
                    }
                } catch (err) {
                    if (self.option_ignore_error_messages.checked) {
                        return;
                    }
                    toastr.error(err.toString().replace(/\n/g, '<br/>'), "Error from Jade Compiler");
                }
            }

            refreshEditors() {
                self.fn.updateHtmlToJade();
                self.fn.updateJadeToHtml();
            }

            onSaveState() {
                var serialized = btoa(JSON.stringify(self.obj));
                riot.route('state/' + serialized)
                self.update();
            }

        }();